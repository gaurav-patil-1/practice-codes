***useCallback Hook*** :

--- The useCallback hook returns a memoized version of the callback function that only changes if one of its dependencies has changed.
--- "memoized version of the callback function" means that React will keep a saved version of that function in memory as long as its dependencies have not changed.

***Memoization in useCallback*** :

--- When you use useCallback to create a memoized version of a function, React keeps track of that function's dependencies (the variables listed in the dependency array). The memoized function will only be recalculated if any of these dependencies change. Otherwise, React will continue using the saved (memoized) version of the function, which can improve the performance of your application by avoiding unnecessary re-renders or recalculations.

--- Basic Syntax :

--- basic idea to prevent unnecessary rerenders and recalculations by resuing the same function reference.

const memoizedCallback = useCallback(() => {
    //function login here
  }, [dependency1, dependency2]);

- The first argument is the function that you want to memoize.
- The second argument is the array of dependencies, the useCallback hook will return new memoized version of function only if one of the dependecy changed.

e.g. :

--- Problem :

1 reason to use useCallback() is to prevent component from e-rendering unless its props are changed

e.g. (problem)
- Todos component re-renders even when the todos do not change.
- Why does this not work? We are using memo, so the Todos component should not re-render since neither the todos state nor the addTodo function are changing when the count is incremented.
- This is because of something called "referential equality".
- Every time a component re-renders, its functions get recreated. Because of this, the addTodo function has actually changed.

index.js --

import { useState } from "react";
import ReactDOM from "react-dom/client";
import Todos from "./Todos";

const App = () => {
  const [count, setCount] = useState(0);
  const [todos, setTodos] = useState([]);

  const increment = () => {
    setCount((c) => c + 1);
  };
  const addTodo = () => {
    setTodos((t) => [...t, "New Todo"]);
  };

  return (
    <>
      <Todos todos={todos} addTodo={addTodo} />
      <hr />
      <div>
        Count: {count}
        <button onClick={increment}>+</button>
      </div>
    </>
  );
};

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);

Todos.js --

import { memo } from "react";

const Todos = ({ todos, addTodo }) => {
  console.log("child render");
  return (
    <>
      <h2>My Todos</h2>
      {todos.map((todo, index) => {
        return <p key={index}>{todo}</p>;
      })}
      <button onClick={addTodo}>Add Todo</button>
    </>
  );
};

export default memo(Todos);


--- Solution
To fix this, we can use the useCallback hook to prevent the function from being recreated unless necessary.
Use the useCallback Hook to prevent the Todos component from re-rendering needlessly:

const addTodo = useCallback(() => {
    setTodos((t) => [...t, "New Todo"]);
  }, []);
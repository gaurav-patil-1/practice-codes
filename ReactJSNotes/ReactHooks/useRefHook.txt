*** useRef Hook*** :
--- useRef hook allows you to persist values between renders
--- it can be used to store mutable values which does not cause re render when updated
--- it can be used to access dom elements directly

Advantages :
- useState causes re render of component on updation of values 
- to avoid this we can use useRef hook

e.g. useRef to track application render

import React, { useState, useRef, useEffect } from "react";

const UseRef = () => {
  const [inputValue, setInputValue] = useState("");
  const count = useRef(0);
  useEffect(() => {
    count.current = count.current + 1;
  });
  return (
    <>
      <input
        type="text"
        value={inputValue}
        onChange={(e) => setInputValue(e.target.value)}
      />
      <h1>Render Count : {count.current}</h1>
    </>
  );
};

export default UseRef;


***Tracking State Changes*** :
--- The useRef Hook can also be used to keep track of previous state values.

const UseRef = () => {
  const [inputValue, setInputValue] = useState("");
  const previousInputValue = useRef("");
  useEffect(() => {
    previousInputValue.current = inputValue;
  }, [inputValue]);
  return (
    <>
      <input
        type="text"
        value={inputValue}
        onChange={(e) => {
          setInputValue(e.target.value);
        }}
      />
      <h4>Current Value : {inputValue}</h4>
      <h4></h4>
      <h4></h4>
    </>
  );
};